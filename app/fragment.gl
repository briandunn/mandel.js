// vim:ft=c
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
precision mediump int;

uniform vec2 window_size;
//left top width height
uniform int max_iterations;
uniform vec4 box;

const int max_max = 0xfff;
const float fmax_max = float(0xffffff);

vec2 scale() {
  float left   = box[0];
  float top    = box[1];
  float width  = box[2];
  float height = box[3];
  float x = (gl_FragCoord.x / window_size.x) * width + left;
  float y = (gl_FragCoord.y / window_size.y) * height + top;
  return vec2(x,y);
}

vec2 c_square(vec2 c) {
  return vec2(
    pow(c.x, 2.) - pow(c.y, 2.),
    2. * c.x * c.y
  );
}

float mandel(vec2 pt) {
  int iterations = 0;
  vec2 last = vec2(0.,0.);
  for(int i = 1; i <= max_max; i++) {
    last = c_square(last) + pt;
    iterations = i;
    if(i > max_iterations || length(last) > 2.)
      break;
  }
  return float(iterations)/float(max_iterations);
}

// 1 << 16
const float bytes_2 = 65536.;

vec3 toColor(float f) {
  vec3 color;
  f *= fmax_max;
  color.b = floor(f / bytes_2);
  color.g = floor((f - color.b * bytes_2) / 256.0);
  color.r = floor(f - color.b * bytes_2 - color.g * 256.0);
  return color / 256.0;
}

void main() {
  float mandel = mandel(scale());
  gl_FragColor = vec4(toColor(mandel), 1);
}
