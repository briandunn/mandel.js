{"version":3,"sources":["app/chunk.js","app/complex.js","app/worker.js"],"names":[],"mappingsvCA,ICAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"public/worker.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Chunk = function () {\n  function Chunk(attributes) {\n    _classCallCheck(this, Chunk);\n\n    Object.assign(this, attributes);\n  }\n\n  _createClass(Chunk, [{\n    key: \"offsetX\",\n    value: function offsetX() {\n      return this.imageData.width * this.offset;\n    }\n  }, {\n    key: \"offsetY\",\n    value: function offsetY() {\n      return 0;\n    }\n  }, {\n    key: \"width\",\n    value: function width() {\n      return this.imageData.width;\n    }\n\n    // x is the column of the pixel out of this chunks width\n    // three widths, box, frame, and chunk\n\n  }, {\n    key: \"scaleX\",\n    value: function scaleX(x) {\n      var _box = this.box,\n          width = _box.width,\n          left = _box.left;\n      // x as a fraction of the whole frame\n\n      var xRatio = (x + this.offsetX()) / this.frame.width;\n      return xRatio * width + left;\n    }\n  }, {\n    key: \"scaleY\",\n    value: function scaleY(y) {\n      var _box2 = this.box,\n          height = _box2.height,\n          top = _box2.top;\n\n      var yRatio = (y + this.offsetY()) / this.frame.height;\n      return yRatio * height + top;\n    }\n  }, {\n    key: \"updatePixels\",\n    value: function updatePixels(fn) {\n      var _imageData = this.imageData,\n          data = _imageData.data,\n          width = _imageData.width;\n\n      var _loop = function _loop(i) {\n        var pixelIndex = i << 2,\n            x = i % width,\n            y = i / width >> 0;\n        fn(x, y).forEach(function (value, i) {\n          data[pixelIndex + i] = value;\n        });\n      };\n\n      for (var i = 0; i < data.length >> 2; i++) {\n        _loop(i);\n      }\n      return this.imageData;\n    }\n  }, {\n    key: \"getPixel\",\n    value: function getPixel(x, y) {\n      var pixelIndex = y * this.imageData.width + x << 2;\n      return this.imageData.data.slice(pixelIndex, pixelIndex + 4);\n    }\n  }]);\n\n  return Chunk;\n}();\n\nexports.default = Chunk;\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Complex = function () {\n  function Complex(real, imaginary) {\n    _classCallCheck(this, Complex);\n\n    this.real = real;\n    this.imaginary = imaginary;\n  }\n\n  _createClass(Complex, [{\n    key: \"abs\",\n    value: function abs() {\n      return Math.sqrt(Math.pow(this.real, 2) + Math.pow(this.imaginary, 2));\n    }\n  }, {\n    key: \"square\",\n    value: function square() {\n      return new Complex(Math.pow(this.real, 2) - Math.pow(this.imaginary, 2), 2 * this.real * this.imaginary);\n    }\n  }, {\n    key: \"add\",\n    value: function add(complex) {\n      return new Complex(this.real + complex.real, this.imaginary + complex.imaginary);\n    }\n  }]);\n\n  return Complex;\n}();\n\nexports.default = Complex;\n","'use strict';\n\nvar _chunk = require('chunk');\n\nvar _chunk2 = _interopRequireDefault(_chunk);\n\nvar _complex = require('complex');\n\nvar _complex2 = _interopRequireDefault(_complex);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nglobal.onmessage = function (message) {\n  if (!message.data.box) return;\n\n  var chunk = new _chunk2.default(message.data),\n      width = chunk.width();\n\n  chunk.updatePixels(function (x, y) {\n    return toColor(calculate(new _complex2.default(chunk.scaleX(x), chunk.scaleY(y)), chunk.iterations));\n  });\n\n  lastChunk = chunk;\n\n  postMessage({ chunk: chunk });\n};\n\n// an iterable that returns successive feedback values for fn starting with start\nvar iterate = function iterate(start, fn) {\n  return _defineProperty({}, Symbol.iterator, function () {\n    var val = start;\n    return {\n      next: function next() {\n        val = fn(val);\n        return {\n          value: val,\n          done: false\n        };\n      }\n    };\n  });\n};\n\nvar takeWhile = function takeWhile(gen, test) {\n  var values = [];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = gen[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      value = _step.value;\n\n      if (!test(value, values.length)) break;\n      values.push(value);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return values;\n};\n\nvar toColor = function toColor(value) {\n  var ranged = value * (1 << 24) >> 0;\n  return Array(3).fill(0).map(function (_, i) {\n    return ranged >> i * 8 & 0xff;\n  }).concat([0xff]);\n};\n\nvar mandel = function mandel(c) {\n  return function (z) {\n    return z.square().add(c);\n  };\n};\n\nvar calculate = function calculate(c, maxIterations) {\n  return takeWhile(iterate(new _complex2.default(0, 0), mandel(c)), function (c, i) {\n    return i <= maxIterations && c.abs() <= 2;\n  }).length / maxIterations;\n};\n"]}